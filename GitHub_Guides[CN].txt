The Hello World project is a time-honored tradition in computer programming. It is a simple exercise that gets you started when learning something new. Let’s get started with GitHub!
HellowWorld项目是一个历史悠久的传统编程项目。在你学习新的东西时，这是一个简单的练习。让我们开始学习GitHub吧！

You’ll learn how to:
你将学会以下几点：

Create and use a repository
创建并使用repository（仓库）

Start and manage a new branch
开启和管理新的branch（分支）

Make changes to a file and push them to GitHub as commits
对文件做出改变并将它们以commit形式提交到GitHub上

Open and merge a pull request
打开及合并pullrequest（pull请求）

What is GitHub?
什么是GitHub？

GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.
GitHub是一个拥有版本控制和协同工作功能的代码托管平台，它可以让你和其他人在任何地方一起为某个项目工作。

This tutorial teaches you GitHub essentials like repositories, branches, commits, and pull requests. 
这个教程会教会你GitHub的几大要素，包括：repositories, branche, commits和 pull requests。

You’ll create your own Hello World repository and learn GitHub’s pull request workflow, a popular way to create and review code.
你将会创建属于你自己的HelloWorld仓库并且学习GitHub的pull请求工作流，一种用来创建和检查代码的流行方式。

No coding necessary
不必写代码

To complete this tutorial, you need a GitHub.com account and Internet access. You don’t need to know how to code, use the command line, or install Git (the version control software GitHub is built on).
为了完成这个教程，你需要一个GitHub的帐号和连入互联网的网络，你不需要知道怎么写代码、也不需要使用命令行和安装客户端。（Git的版本控制软件已经有了！）

Tip: Open this guide in a separate browser window (or tab) so you can see it while you complete the steps in the tutorial.
小技巧：将本教程在单独的窗口或标签页打开，这样你可以一边动手一边看教程。

Step 1. Create a Repository
第1步：创建仓库

A repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets – anything your project needs.
仓库通常是用来管理一个独立的项目，它可以包含文件夹和文件，图像，视频，表格和数据库等任何你需要用到的项目文件。

We recommend including a README, or a file with information about your project. GitHub makes it easy to add one at the same time you create your new repository. It also offers other common options such as a license file.
推荐做法是在仓库中包含一个介绍你的项目的README文件。本站在你创建仓库的时候会协助你一同创建README文件，这将变得非常容易。
同时也会提供证书文件等其他常用选项。

Your hello-world repository can be a place where you store ideas, resources, or even share and discuss things with others.
这个HelloWorld仓库将会是存放你的想法、资源。甚至是分享和讨论事情的地方。

To create a new repository
创建仓库的具体方法：

In the upper right corner, next to your username, click  and then click New repository.
在屏幕右上角靠近你的用户的地方有个+号，点击后再点击New repository

Name your repository hello-world.
将仓库命名为Hello-World

Write a short description.
写上一段简短的描述

Select Initialize this repository with a README.
选择Initialize this repository with a README

Click Create repository. 
点击Create repository。


Step 2. Create a Branch
第2步：创建分支

Branching is the way to work on different versions of a repository at one time.
分支是同时在一个仓库的不同版本中工作的方法。

By default your repository has one branch named master which is considered to be the definitive branch. We use branches to experiment and make edits before committing them to master.
默认情况下仓库是拥有一个叫做master的具有决定性的分支，我们在提交改变前会先在分支上编辑和实验。

When you create a branch off the master branch, you’re making a copy, or snapshot, of master as it was at that point in time. 当你通过master来创建一个分支时，就相当于对那个时间点的master做了一个备份或者说一个快照。

If someone else made changes to the master branch while you were working on your branch, you could pull in those updates.
当有人在你在master工作时对其做出改变，你可以选择将其收入更新中。

This diagram shows:

The master branch
A new branch called feature (because we’re doing ‘feature work’ on this branch)
The journey that feature takes before it’s merged into master
a branch

Have you ever saved different versions of a file? Something like:
你是否也曾经像下面这样保存过不同版本的文件？
story.txt
story-joe-edit.txt
story-joe-edit-reviewed.txt
Branches accomplish similar goals in GitHub repositories.
分支就是在GitHub中实现了类似的功能。

Here at GitHub, our developers, writers, and designers use branches for keeping bug fixes and feature work separate from our master (production) branch. When a change is ready, they merge their branch into master.
在GitHub中，我们的开发者，作家，设计师利用分支来保持漏洞修复和功能开发与master之间的独立，只有当做出的改变是可行的时候才将分支与master合并。

To create a new branch
创建新分支的具体步骤：

Go to your new repository hello-world.
打开你的仓库HelloWorld

Click the drop down at the top of the file list that says branch: master.
点击文件列表上方的下拉框，可以看到有个分支叫做master

Type a branch name, readme-edits, into the new branch text box.
在文本输入框中输入一个你想创建的分支的名字（这里使用readme-edits）

Select the blue Create branch box or hit “Enter” on your keyboard.
点击蓝色的Createbranch或者直接按回车键

Now you have two branches, master and readme-edits. They look exactly the same, but not for long! Next we’ll add our changes to the new branch.
现在你已经拥有两个分支了，master和readme-edits。它们两个看起来很像，但是这状态不会持续很久，因为接下来我们就将在新的分支中做出改变。


Step 3. Make and commit changes
第3步：做出改变并提交

Bravo! Now, you’re on the code view for your readme-edits branch, which is a copy of master. Let’s make some edits.、
好极了！现在你已经可以在readme-edits分支上查看你的代码了，目前它还只是master的备份，让我们对它进行编辑吧。

On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. 
在GitHub中，对文件做出改变并保存的 行为称为commits。每个commits都伴随着commit message，这些信息是用来解释为什么做出了某些改变

Commit messages capture the history of your changes, so other contributors can understand what you’ve done and why.
commit messages 捕获了你做出改变的历史，所以其他贡献者可以明白你做了什么和为什么做出这些改变。

Make and commit changes
做出改变和提交的具体步骤：

Click the README.md file.
点击文件README.md

Click the  pencil icon in the upper right corner of the file view to edit.
点击右上角的铅笔图标进入文件的编辑模式

In the editor, write a bit about yourself.
在编辑器中，写一点关于你自己的项目介绍

Write a commit message that describes your changes.
在commit message 中写一点做出的改变的描述

Click Commit changes button.
点击commit chages按钮

commit
完成commit操作

These changes will be made to just the README file on your readme-edits branch, so now this branch contains content that’s different from master.
这些改变只对readme-edit分支中的README文件有效，所以现在这个分支中所包含的内容将与master分支不同。

Step 4. Open a Pull Request
第4步：打开一个pull请求

Nice edits! Now that you have changes in a branch off of master, you can open a pull request.
很棒的改变！现在你已经改变了master的一个分支，你可以将其作为pull请求打开。

Pull Requests are the heart of collaboration on GitHub.
pull请求是在GitHub中协同工作的核心

When you open a pull request, you’re proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch.
当你打开一个pull请求，你就是在将你的改变请求其他人的检查并将做出的改变加入到他们的分支中。

Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in green and red.
pull请求展示了两个分支之间不同的地方，做出的改变，包括增加的部分和减少的部分，都会以红色或绿色的标识展示出来。

As soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.
一旦你做出了commit，你就能打开一个pull请求并开展讨论，这一切甚至可以在代码未完成的情况下进行。

By using GitHub’s @mention system in your pull request message, you can ask for feedback from specific people or teams, whether they’re down the hall or 10 time zones away.
通过在你的pull请求消息中使用GitHub的@提醒系统，你可以特定的个人或团体询问他们的反馈意见无论他们身在何处。

You can even open pull requests in your own repository and merge them yourself. It’s a great way to learn the GitHub Flow before working on larger projects.
你甚至可以在你自己的仓库中打开一个pull请求并与你自己合并，这是一个在进入大项目中工作前非常好的学习GitHub流的方法。

Open a Pull Request for changes to the README
对README的改变做出pull请求的具体步骤

Click the  Pull Request tab, then from the Pull Request page, click the green New pull request button.
点击pull request的标签，在pull request页中点击绿色的按钮new pull request。

Select the branch you made, readme-edits, to compare with master (the original).	
选择你创建的readme-edit分支用来和master分支源（源分支）对比。

Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit.	
在对比的页面中检查看看是不是你要做出的改变，确保是你想提交的改变。

When you’re satisfied that these are the changes you want to submit, click the big green Create Pull Request button.
当确定是你要提交的内容后，点击那个大大的绿色的按钮Creat pull request。

Give your pull request a title and write a brief description of your changes.	
帮你的pull请求写一个标题并对你做出的改变写一段简短的描述。

When you’re done with your message, click Create pull request!
当你填完这些信息后，点击create pull request

Tip: You can use emoji and drag and drop images and gifs onto comments and Pull Requests.
小技巧：你可以使用emoji表情和拖拽图片到评论区和pull请求中。

Step 5. Merge your Pull Request
第5步：合并你的pull请求

In this final step, it’s time to bring your changes together – merging your readme-edits branch into the master branch.
在这最后一步中，我们将把你对readme-edit分支做出的改变合并到master分支中。

Click the green Merge pull request button to merge the changes into master.
点击绿色的按钮merge pull request将变化合并到master分支中。

Click Confirm merge.
点击 confirm merge

Go ahead and delete the branch, since its changes have been incorporated, with the Delete branch button in the purple box.
在变化合并前可以通过点击Delete branch按钮来删除分支。

Celebrate!
恭喜你！！！

By completing this tutorial, you’ve learned to create a project and make a pull request on GitHub! 
通过完成这份教程，你已经学会在GitHub中创建项目和使用pull请求啦。

Here’s what you accomplished in this tutorial:
以下是你在本教程中学会的：

Created an open source repository
创建开源的仓库。

Started and managed a new branch
管理新的分支。

Changed a file and committed those changes to GitHub
对文件做出改变并在GitHub中进行提交。

Opened and merged a Pull Request
打开并合并一个pull请求。

Take a look at your GitHub profile and you’ll see your new contribution squares!
快打开你的GitHub个人简介看看，是不是多了些贡献小方块？

If you want to learn more about the power of pull requests, we recommend reading the GitHub Flow Guide. You might also visit GitHub Explore and get involved in an Open Source project.
如果你想了解更多有关pull请求的作用，建议你去看看 GitHub Flow Guide。你可能也会顺便看看 GitHub Explore并且对开源项目产生兴趣。

Tip: Check out our other Guides and YouTube Channel for more GitHub how-tos.
小技巧：看看我们的其他教程和我们在youtube上的频道可以学到更多GitHub技巧。

Last updated February, 2016
最后更新于2016年2月。
